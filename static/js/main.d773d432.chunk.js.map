{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["CardBox","props","Container","CardDeck","Card","Img","variant","src","data","countryInfo","flag","Body","Title","country","Badge","pill","className","continent","Text","cases","deaths","todayCases","todayDeaths","Footer","recovered","CardList","covid_api","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","bind","fetch","then","response","json","this","filteredCountries","filter","toLowerCase","includes","toLocaleLowerCase","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d773d432.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\nimport { Container, CardDeck, Card, Badge } from 'react-bootstrap';\r\n\r\nexport const CardBox = props => (\r\n\r\n<Container>\r\n    <CardDeck>\r\n        <Card>\r\n\r\n            <Card.Img variant=\"top\" src={props.data.countryInfo.flag} />\r\n\r\n            <Card.Body>\r\n                <Card.Title>{ props.data.country }</Card.Title>\r\n                <Badge pill className=\"mb-1\" variant=\"warning\">\r\n                    {props.data.continent}\r\n                </Badge>\r\n\r\n                <Card.Text className=\"text-info\">\r\n                    Cases : {props.data.cases}\r\n                </Card.Text>\r\n                <Card.Text className=\"text-secondary\">\r\n                    Deaths : {props.data.deaths}\r\n                </Card.Text>\r\n                <Card.Text className=\"text-primary\">\r\n                    Today's Cases : {props.data.todayCases}\r\n                </Card.Text>\r\n                <Card.Text className=\"text-secondary\">\r\n                    Today's Deaths : {props.data.todayDeaths}\r\n                </Card.Text>\r\n\r\n            </Card.Body>\r\n            <Card.Footer>\r\n            <small className=\"text-muted\">Recovered : {props.data.recovered}</small>\r\n            </Card.Footer>\r\n        </Card>\r\n  </CardDeck>\r\n</Container>\r\n   \r\n)","import React from 'react';\r\nimport { CardBox }  from '../card/card.component'\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => (\r\n\r\n      <div className=\"card-list\">\r\n\r\n          {props.covid_api.map(data => (\r\n            <CardBox key={data.country} data={ data } />\r\n          ))}\r\n\r\n      </div>\r\n    \r\n)","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n\r\n    <input \r\n            className=\"search\"\r\n            type=\"search\" \r\n            placeholder={placeholder} \r\n            onChange={handleChange}\r\n    />\r\n\r\n);","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      covid_api : [],\n      searchField : ''\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://corona.lmao.ninja/v2/countries?yesterday=true&sort=todayDeaths')\n    .then(response => response.json())\n    .then(todayDeaths => this.setState({ covid_api : todayDeaths }));\n  }\n\n  handleChange = e => {\n    this.setState({ searchField : e.target.value });\n  }\n  \n  render() {\n\n    const { covid_api, searchField } = this.state;\n\n    const filteredCountries = covid_api.filter(data =>\n      data.country.toLowerCase()\n      .includes(searchField.toLocaleLowerCase())\n      );\n\n    return (\n\n      <div className=\"App\">\n\n        <h1 className=\"heading-1\">COVID19 Update : Affected Countries</h1>\n\n        <SearchBox \n\n          placeholder=\"Search Country\" \n          handleChange={ this.handleChange }\n\n        />\n\n        <CardList  covid_api={ filteredCountries } />\n       \n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}